process.env.NTBA_FIX_319 = 1;
const TelegramApi = require('node-telegram-bot-api');
const {
  menuOptions,
  supportOptions,
  mainOptions,
  productOptions,
  dillerOptions,
  arrangeOptions,
  shopOptions,
  referralOptions,
} = require('./options');
const mongoose = require('mongoose');
const Product = require('./api/models/product');
const UserData = require('./api/models/userData');
const sendEmail = require('./mail');
const { getUserPromocode } = require('./utils/utils');

// mongoose.connect(
//   'mongodb+srv://cryptmine:cryptadmin461@h5.nntpg.mongodb.net/myFirstDatabase?retryWrites=true&w=majority',
//   {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
//   }
// );

const token = '7033734328:AAEHwNuW074mQ-azEZskRQG9OXCFtw_W4rs'; 
const bot = new TelegramApi(token, { polling: true });
let numberItem = 0;
let productsLength;
let count = 1;
let basket = [];
let product = null;
let changeInputText = true;
let dataForm = {};
let closeOnText = false;
let myOrder = null;
let myCheck = null;
let showMyOrder = false;
let itog = null;

let setProduct = (chatId, operation) => {
  if (operation === 'plus')
    (numberItem < productsLength ? numberItem++ : (numberItem = 0)) &&
      (count = 1);
  if (operation === 'minus')
    (numberItem > 0 ? numberItem-- : (numberItem = productsLength)) &&
      (count = 1);

  Product.find()
    .select('name price taste productImage')
    .exec()
    .then((docs) => {
      const response = docs.map((doc) => {
        return {
          name: doc.name,
          price: doc.price,
          taste: doc.taste,
          productImage: doc.productImage,
        };
      });
      productsLength = response.length - 1;
      product = { ...response[numberItem], count };
      bot.sendPhoto(
        chatId,
        `https://h5russia.ew.r.appspot.com/images/productImagesTelegram/${response[numberItem].productImage}`,
        {
          caption: `<b>H5 ${response[numberItem].name}</b> \n\n üíé –í–∫—É—Å: <b>${
            response[numberItem].taste
          }</b> \n üî• –¶–µ–Ω–∞: <b>${response[numberItem].price} —Ä—É–±.</b> \n\n ${
            count >= 1 ? `‚ö°Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${count} —à—Ç.</b>` : ``
          } \n ${
            count >= 1
              ? `üíµ –ò—Ç–æ–≥: <b>${response[numberItem].price * count} —Ä—É–±.</b>`
              : ``
          }`,
          parse_mode: 'HTML',
          ...productOptions,
        }
      );
    })
    .catch((err) => {
      console.log(err);
    });
};
let catalogTaste = (chatId) => {
  Product.find()
    .select('name price taste productImage')
    .exec()
    .then((docs) => {
      const response = docs.map((doc) => {
        return {
          name: doc.name,
          price: doc.price,
          taste: doc.taste,
          productImage: doc.productImage,
        };
      });
      bot.sendMessage(chatId, '<b>üéÅ  H5 Store –ö–∞—Ç–∞–ª–æ–≥</b>\n\n–í—Å–µ –≤–∫—É—Å—ã', {
        parse_mode: 'HTML',
        reply_markup: JSON.stringify({
          inline_keyboard: [
            ...response.map((item, i) => {
              return [
                {
                  text: `${item.taste}`,
                  callback_data: `/taste${i}`,
                },
              ];
            }),
            [
              { text: 'üè∑ –ü–æ –æ–¥–∏–Ω–æ—á–∫–µ', callback_data: '/catalogOne' },
              {
                text: 'üìú –ú–µ–Ω—é',
                callback_data: '/menu',
              },
            ],
          ],
        }),
      });
    })
    .catch((err) => {
      console.log(err);
    });
};
let icrement = (chatId, operation, messageId) => {
  count > 1 && count--;
  return setProduct(chatId, operation, messageId);
};
let dicrement = (chatId, operation, messageId) => {
  count++;
  return setProduct(chatId, operation, messageId);
};
let myBasket = (chatId, messageId) => {
  let totalCount =
    basket.length > 0 &&
    basket
      .map((product) => product.count)
      .reduce((total, amount) => total + amount);
  let totalPrice =
    basket.length > 0 &&
    basket
      .map((product) => product.count * product.price)
      .reduce((total, amount) => total + amount);
  myCheck = totalPrice;
  let productItems = basket.map((product) => {
    return `<b>H5 ${product.name}</b> \n\n üíé –í–∫—É—Å: <b>${
      product.taste
    }</b> \n üî• –¶–µ–Ω–∞: <b>${product.price} —Ä—É–±.</b> \n\n ${
      count >= 1 ? `‚ö°Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${product.count} —à—Ç.</b>` : ``
    } \n ${
      count >= 1 ? `üíµ –ò—Ç–æ–≥: <b>${product.price * product.count} —Ä—É–±.</b>` : ``
    }`.replace(/\n/g, '');
  });

  myOrder = productItems.map((item, i) => `\n ${i + 1}. üîπ ${item}`);

  itog = `\n\n<i>–ò—Ç–æ–≥:</i>\n–ö–æ–ª-–≤–æ: <b>${totalCount} —à—Ç.</b>\n–°—É–º–º–∞: <b>${totalPrice} —Ä—É–±.</b>`;

  bot.sendMessage(
    chatId,
    `'<b>üõí  H5 Store –ö–æ—Ä–∑–∏–Ω–∞</b>\n\n<b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n${
      productItems.length > 0
        ? `${productItems.map(
            (item, i) => `\n ${i + 1}. üîπ ${item}`
          )}\n\n<i>–ò—Ç–æ–≥:</i>\n–ö–æ–ª-–≤–æ: <b>${totalCount} —à—Ç.</b>\n–°—É–º–º–∞: <b>${totalPrice} —Ä—É–±.</b>\n\n<b>*</b> <i>–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –µ–≥–æ –Ω–æ–º–µ—Ä</i>`
        : '\n–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'
    } `,
    {
      parse_mode: 'HTML',
      reply_markup: JSON.stringify({
        inline_keyboard: [
          basket.map((item, i) => {
            return {
              text: `${i + 1}`,
              callback_data: `/delete${i + 1}`,
            };
          }),
          basket.length > 0
            ? [{ text: 'üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: '/arrange' }]
            : [],
          [
            {
              text: 'üìú –ú–µ–Ω—é',
              callback_data: '/menu',
            },
            { text: 'üöÄ –ú–∞–≥–∞–∑–∏–Ω', callback_data: '/shop' },
          ],
        ],
      }),
    }
  );
};
let menu = async (chatId) => {
  await bot.sendSticker(
    chatId,
    'CAACAgIAAxkBAAEDrydh4Z9ienL04VgVmpScho8xiyZ4JQACchUAApQ4EUuWJcDeP9RGciME'
  );
  return bot.sendMessage(chatId, '<b> H5 Store </b>', {
    parse_mode: 'HTML',
    ...menuOptions,
  });
};
let support = (chatId) => {
  bot.sendMessage(chatId, '<b>üí¨  H5 Store –ü–æ–¥–¥–µ—Ä–∂–∫–∞ </b>', {
    parse_mode: 'HTML',
    ...supportOptions,
  });
};
let dealer = async (msg, chatId) => {
  await bot.sendMessage(
    chatId,
    '<b>üíº  H5 Store –î–∏—Å—Ç—Ä–∏–±—å—é—Ü–∏—è \n\n</b>–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–µ—Ä–æ–º, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
    {
      parse_mode: 'HTML',
      ...mainOptions,
    }
  );
  changeInputText = false;
  closeOnText = true;
  bot.sendMessage(chatId, '<b>üë§  –í–∞—à–µ –∏–º—è: \n\n</b>', {
    parse_mode: 'HTML',
  });
};
let arrange = async (msg, chatId) => {
  await bot.sendMessage(
    chatId,
    '<b>üíº  H5 Store –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ \n\n</b>–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
    {
      parse_mode: 'HTML',
      ...mainOptions,
    }
  );
  changeInputText = false;
  closeOnText = true;
  showMyOrder = true;
  bot.sendMessage(chatId, '<b>üë§  –í–∞—à–µ –∏–º—è: \n\n</b>', {
    parse_mode: 'HTML',
  });
};
let buy = (msg, chatId, title) => {
  bot.answerCallbackQuery(msg.id, {
    text: '–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞!',
    show_alert: true,
  });
  menu(chatId);
  changeInputText = true;
  sendEmail(
    title,
    dataForm.name,
    dataForm.phone,
    dataForm.mail,
    !!dataForm.addres && dataForm.addres,
    !!dataForm.product && dataForm.product,
    !!dataForm.check && dataForm.check
  );
  dataForm = {};
  closeOnText = false;
};
let bonuses = (chatId) => {
  bot.sendMessage(
    chatId,
    '<b>üéÅ  H5 Store –ê–∫—Ü–∏–∏</b>\n\n–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–∏—Ö –∞–∫—Ü–∏—è—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö!',
    {
      parse_mode: 'HTML',
      ...mainOptions,
    }
  );
};
let store = (chatId) => {
  bot.sendMessage(
    chatId,
    '<b>üöÄ  H5 Store –ö–∞—Ç–∞–ª–æ–≥</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–∏.',
    {
      parse_mode: 'HTML',
      ...shopOptions,
    }
  );
  changeInputText = true;
  closeOnText = false;
};
let getCode = async (chatId, userId) => {
  let user = await UserData.findOne({ userId: userId });
  if (user === null) {
    user = new UserData({
      userId: userId,
      ref_code: getUserPromocode(),
    });
    user.save();
  }
  await bot.sendMessage(
    chatId,
    `<b>üöÄ  H5 Store –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:\n\n <b>${user.ref_code}</b>`,
    {
      parse_mode: 'HTML',
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: 'üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –¥—Ä—É–≥—É',
              switch_inline_query: `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${user.ref_code}`,
            },
          ],
          [
            {
              text: 'üìú –ú–µ–Ω—é',
              callback_data: '/menu',
            },
            { text: 'üöÄ –ú–∞–≥–∞–∑–∏–Ω', callback_data: '/shop' },
          ],
        ],
      }),
    }
  );
};
let enterCode = async (chatId, userId) => {
  bot.sendMessage(
    chatId,
    '<b>üöÄ  H5 Store –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ',
    {
      parse_mode: 'HTML',
    }
  );
};
let referral = (chatId) => {
  bot.sendMessage(
    chatId,
    '<b>üéÅ  H5 Store –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫–∏!',
    {
      parse_mode: 'HTML',
      ...referralOptions,
    }
  );
};

const start = () => {
  bot.setMyCommands([
    { command: '/menu', description: '–ú–µ–Ω—é' },
    { command: '/shop', description: '–ú–∞–≥–∞–∑–∏–Ω' },
    { command: '/basket', description: '–ö–æ—Ä–∑–∏–Ω–∞' },
    { command: '/bonuses', description: '–ê–∫—Ü–∏–∏' },
    { command: '/dealer', description: '–î–∏—Å—Ç—Ä–∏–±—å—é—Ü–∏—è' },
    { command: '/referral', description: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞' },
    { command: '/support', description: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' },
  ]);

  bot.onText(/\@H5TESTbot (.+)/, async (msg, match) => {
    let userId = msg.from.id;
    let chatId = msg.chat.id;
    let refCode = match[1].split(' ')[1];
    // closeOnText && ()
    let owner = await UserData.findOne({
      ref_code: refCode,
      userId: { $ne: userId },
    });
    if (owner === null) {
      bot.sendMessage(
        chatId,
        '<b>üöÄ  H5 Store –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ ',
        {
          parse_mode: 'HTML',
        }
      );
    } else {
      let guest = await UserData.findOne({
        userId: userId,
      });
      if (guest !== null) {
        guest.invite_ref_code = refCode;
        guest.save();
        bot.sendMessage(
          chatId,
          '<b>üöÄ  H5 Store –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ',
          {
            parse_mode: 'HTML',
          }
        );
      } else {
        bot.sendMessage(
          chatId,
          '<b>üöÄ  H5 Store –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ ',
          {
            parse_mode: 'HTML',
          }
        );
      }
    }
  });

  bot.onText(/^[–∞-—è–ê-–Ø—ë–Åa-zA-Z]+$/, (msg) => {
    const chatId = msg.chat.id;
    closeOnText &&
      bot.sendMessage(chatId, '<b>üìû  –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:</b>', {
        parse_mode: 'HTML',
      }) &&
      (dataForm.name = msg.text);
  });
  bot.onText(/^((8|\+7)[\-]?)?(\(?\d{3}\)?[\-]?)?[\d\-]{7,10}$/, (msg) => {
    const chatId = msg.chat.id;
    closeOnText &&
      bot.sendMessage(chatId, '<b>üíå  –í–∞—à–∞ –ø–æ—á—Ç–∞:</b>', {
        parse_mode: 'HTML',
      }) &&
      (dataForm.phone = msg.text);
  });
  bot.onText(
    /^([a-z0-9_-]+\.)*[a-z0-9_-]+@[a-z0-9_-]+(\.[a-z0-9_-]+)*\.[a-z]{2,6}$/,
    (msg) => {
      const chatId = msg.chat.id;
      let reply_markup = showMyOrder ? arrangeOptions : dillerOptions;
      closeOnText &&
        (dataForm.mail = msg.text) &&
        bot.sendMessage(
          chatId,
          `<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\nüë§  <b>–ò–º—è:</b>  ${
            dataForm.name
          }\nüìû  <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b>  ${dataForm.phone}\nüíå  <b>–ü–æ—á—Ç–∞:</b>  ${
            dataForm.mail
          } ${showMyOrder ? `\n\n\n<b>–í–∞—à –∑–∞–∫–∞–∑:\n</b>${myOrder}${itog}` : ``}`,
          {
            parse_mode: 'HTML',
            ...reply_markup,
          }
        );
    }
  );
  bot.onText(/^[–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9]+$/, (msg) => {
    // console.log('aaaaa');
    // const chatId = msg.chat.id;
    // closeOnText &&
    //   bot.sendMessage(chatId, '<b>üìû  –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:</b>', {
    //     parse_mode: 'HTML',
    //   }) &&
    //   (dataForm.adress = msg.text);
  });
  bot.on('message', async (msg) => {
    const text = msg.text;
    const chatId = msg.chat.id;
    const messageId = msg.message_id;

    // bot.deleteMessage(chatId, messageId - 1);
    // bot.deleteMessage(chatId, messageId);

    switch (text) {
      case '/menu':
        menu(chatId);
        break;
      case '/start':
        menu(chatId);
        break;
      case '/shop':
        store(chatId);
        break;
      case '/bonuses':
        bonuses(chatId);
        break;
      case '/basket':
        myBasket(chatId, messageId);
        break;
      case '/dealer':
        dealer(msg, chatId);
        break;
      case '/support':
        support(chatId);
        break;
      case `/referral`:
        referral(chatId);
        break;
      default:
        changeInputText &&
          bot.sendMessage(
            chatId,
            '–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! –í–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã!'
          );
        break;
    }
  });

  bot.on('callback_query', (msg) => {
    const data = msg.data;
    const chatId = msg.message.chat.id;
    const userId = msg.from.id;
    const messageId = msg.message.message_id;
    let deleteNumber = msg.data.replace(/[\D]+/, '');

    // bot.deleteMessage(chatId, messageId - 2);
    // bot.deleteMessage(chatId, messageId - 1);
    // bot.deleteMessage(chatId, messageId);

    switch (data) {
      case '/menu':
        menu(chatId);
        break;
      case '/shop':
        store(chatId);
        break;
      case '/basket':
        myBasket(chatId);
        break;
      case '/bonuses':
        bonuses(chatId);
        break;
      case '/dealer':
        dealer(msg, chatId);
        break;
      case '/support':
        support(chatId);
        break;
      case '/left':
        setProduct(chatId, 'minus', messageId);
        break;
      case '/right':
        setProduct(chatId, 'plus', messageId);
        break;
      case '/icrement':
        icrement(chatId, '', messageId);
        break;
      case '/dicrement':
        dicrement(chatId, '', messageId);
        break;
      case '/arrange':
        arrange(msg, chatId);
        break;
      case '/buy':
        buy(msg, chatId, '–•–æ—á—É —Å—Ç–∞—Ç—å –¥–∏–ª–ª–µ—Ä–æ–º');
        break;
      case '/order':
        showMyOrder = false;
        dataForm.product = myOrder.map((item) => item.replace(/\n/g, ''));
        dataForm.check = myCheck;
        buy(msg, chatId, '–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑');
        break;
      case `/delete${deleteNumber}`:
        basket.splice(deleteNumber - 1, 1);
        myBasket(chatId);
        break;
      case '/addBasket':
        basket.push(product);
        bot.answerCallbackQuery(msg.id, {
          text: '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!',
        });
        bot.deleteMessage(chatId, messageId);
        setProduct(chatId);
        break;
      case `/taste${deleteNumber}`:
        numberItem = deleteNumber;
        setProduct(chatId);
        break;
      case `/catalogTaste`:
        catalogTaste(chatId);
        break;
      case `/catalogOne`:
        setProduct(chatId);
        break;
      case `/get_code`:
        getCode(chatId, userId);
        break;
      case `/enter_code`:
        enterCode(chatId, userId);
        break;
      case `/referral`:
        referral(chatId);
        break;
      default:
        break;
    }
  });

  bot.on('polling_error', (msg) => console.log(msg));
};

start();
